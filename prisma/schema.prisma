// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Restaurant Model
model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String
  email       String?
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tables     Table[]
  categories Category[]
  menus      Menu[]
  orders     Order[]

  @@map("restaurants")
}

// Table Model
model Table {
  id           String  @id @default(cuid())
  restaurantId String
  tableNumber  String
  qrCode       String  @unique
  seats        Int     @default(4)
  isActive     Boolean @default(true)
  
  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@unique([restaurantId, tableNumber])
  @@map("tables")
}

// Category Model
model Category {
  id           String  @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  sortOrder    Int     @default(0)
  isActive     Boolean @default(true)
  
  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menus      Menu[]

  @@unique([restaurantId, name])
  @@map("categories")
}

// Menu Model
model Menu {
  id           String   @id @default(cuid())
  restaurantId String
  categoryId   String
  name         String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  imageUrl     String?
  isAvailable  Boolean  @default(true)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("menus")
}

// Order Model
model Order {
  id           String      @id @default(cuid())
  restaurantId String
  tableId      String
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  customerName String?
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table      Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

// OrderItem Model
model OrderItem {
  id       String  @id @default(cuid())
  orderId  String
  menuId   String
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  notes    String?
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu  Menu  @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  CANCELLED
}
